NAME
    simple_shell - a simple UNIX command interpreter

SYNOPSIS
    simple_shell [OPTION]...

DESCRIPTION
    simple_shell is a simple UNIX command interpreter that reads commands from
    either standard input (stdin) or a file and executes them.

    - Invokes an interactive shell or a batch shell depending on the input mode.
    - Supports built-in commands and utilizes the PATH environment variable to find executables.
    - Implements basic features like command execution, environmental variable expansion, and the ability to run programs from the filesystem.

FUNCTIONS
    int main(int argc, char *argv[])
        Starts the shell and handles command line arguments.

    int cmd_read(char *s, size_t __attribute__((unused)) file_stream, char *name)
        Reads and parses commands from input, then dispatches them for execution.

    void print_not_found(char *cmd, char *name)
        Prints an error message if the command is not found in the PATH.

    int call_command(char *cmd_arr[], char *name)
        Handles the execution of commands including path resolution and forking processes.

    int execute_command(char *cmd_arr[], char *name)
        Executes the command using execve after forking the process.

    char *pathfinder(char *cmd)
        Resolves paths for executables from the PATH environment variable.

    int _printenv(void)
        Prints the current environment variables.

    int _str_n_cmp(char *s1, char *s2, int n)
        Compares up to n characters of two strings.

    char *_getenv(char *var)
        Retrieves the value of an environment variable.

EXAMPLES
    Running the shell interactively:
        $ ./simple_shell
        simple_shell $ ls -l
        total 0
        -rw-r--r--  1 user  staff  0 Apr 25 12:00 file.txt

    Running a single command:
        $ echo "echo hello" | ./simple_shell
        hello

    Exiting the shell:
        simple_shell $ exit

AUTHOR
    Written by
    Nelson Betancourt <nelsonba787@gmail.com>
    Ramon Antonio Vega <antovega@me.com>

SEE ALSO
    sh(1), bash(1), dash(1), execve(2), fork(2), wait(2)
